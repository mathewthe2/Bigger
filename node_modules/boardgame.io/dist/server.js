'use strict';

var asyncGenerator = function () {
  function AwaitValue(value) {
    this.value = value;
  }

  function AsyncGenerator(gen) {
    var front, back;

    function send(key, arg) {
      return new Promise(function (resolve, reject) {
        var request = {
          key: key,
          arg: arg,
          resolve: resolve,
          reject: reject,
          next: null
        };

        if (back) {
          back = back.next = request;
        } else {
          front = back = request;
          resume(key, arg);
        }
      });
    }

    function resume(key, arg) {
      try {
        var result = gen[key](arg);
        var value = result.value;

        if (value instanceof AwaitValue) {
          Promise.resolve(value.value).then(function (arg) {
            resume("next", arg);
          }, function (arg) {
            resume("throw", arg);
          });
        } else {
          settle(result.done ? "return" : "normal", result.value);
        }
      } catch (err) {
        settle("throw", err);
      }
    }

    function settle(type, value) {
      switch (type) {
        case "return":
          front.resolve({
            value: value,
            done: true
          });
          break;

        case "throw":
          front.reject(value);
          break;

        default:
          front.resolve({
            value: value,
            done: false
          });
          break;
      }

      front = front.next;

      if (front) {
        resume(front.key, front.arg);
      } else {
        back = null;
      }
    }

    this._invoke = send;

    if (typeof gen.return !== "function") {
      this.return = undefined;
    }
  }

  if (typeof Symbol === "function" && Symbol.asyncIterator) {
    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
      return this;
    };
  }

  AsyncGenerator.prototype.next = function (arg) {
    return this._invoke("next", arg);
  };

  AsyncGenerator.prototype.throw = function (arg) {
    return this._invoke("throw", arg);
  };

  AsyncGenerator.prototype.return = function (arg) {
    return this._invoke("return", arg);
  };

  return {
    wrap: function (fn) {
      return function () {
        return new AsyncGenerator(fn.apply(this, arguments));
      };
    },
    await: function (value) {
      return new AwaitValue(value);
    }
  };
}();





var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();







var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};



































var toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  } else {
    return Array.from(arr);
  }
};

/*
 * Copyright 2017 Google Inc.
 *
 * Use of this source code is governed by a MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 */

/**
 * InMemory data storage.
 */
var InMemory = function () {
  /**
   * Creates a new InMemory storage.
   */
  function InMemory() {
    classCallCheck(this, InMemory);

    this.games = new Map();
  }

  /**
   * Write the game state to the in-memory object.
   * @param {string} id - The game id.
   * @param {object} store - A Redux store to persist.
   */


  createClass(InMemory, [{
    key: "set",
    value: function set$$1(id, store) {
      this.games.set(id, store);
    }

    /**
     * Read the game state from the in-memory object.
     * @param {string} id - The game id.
     * @returns {object} - A Redux store with the game state, or undefined
     *                     if no game is found with this id.
     */

  }, {
    key: "get",
    value: function get$$1(id) {
      return this.games.get(id);
    }

    /**
     * Read the game state from the in-memory object.
     * @param {string} id - The game id.
     * @returns {boolean} - True if a game with this id exists.
     */

  }, {
    key: "has",
    value: function has(id) {
      return this.games.has(id);
    }
  }]);
  return InMemory;
}();

/*
 * Copyright 2017 Google Inc.
 *
 * Use of this source code is governed by a MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 */

var MAKE_MOVE = 'MAKE_MOVE';
var END_TURN = 'END_TURN';
var RESTORE = 'RESTORE';

/*
 * Copyright 2017 Google Inc.
 *
 * Use of this source code is governed by a MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 */

/**
 * Generate a move to be dispatched to the game move reducer.
 *
 * @param {object} move - The move to dispatch.
 * @param {string} move.type - The move type.
 * @param {Array}  move.args - Additional arguments.
 */


/**
 * End the current turn and yield to the next player.
 */


/**
 * Used to reset the Redux store's state.
 * @param {object} state - The state to restore.
 */

/*
 * Copyright 2017 Google Inc.
 *
 * Use of this source code is governed by a MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 */

/**
 * createGameReducer
 *
 * Creates the main game state reducer.
 * @param {...object} game - Return value of Game().
 * @param {...object} numPlayers - The number of players.
 */
function createGameReducer(_ref) {
  var game = _ref.game,
      numPlayers = _ref.numPlayers;

  if (!game) {
    game = {
      setup: function setup() {
        return {};
      },
      names: [],
      reducer: function reducer(G) {
        return G;
      },
      victory: function victory() {
        return null;
      }
    };
  }

  if (!numPlayers) {
    numPlayers = 2;
  }

  var initial = {
    // User managed state.
    G: game.setup(numPlayers),

    // Framework managed state.
    ctx: {
      turn: 0,
      currentPlayer: '0',
      numPlayers: numPlayers,
      winner: null
    },

    // A list of actions performed so far. Used by the
    // GameLog to display a journal of moves.
    log: [],

    // A monotonically non-decreasing ID to ensure that
    // state updates are only allowed from clients that
    // are at the same version that the server.
    _id: 0,

    // A snapshot of this object so that actions can be
    // replayed over it to view old snapshots.
    _initial: {}
  };

  var deepCopy = function deepCopy(obj) {
    return JSON.parse(JSON.stringify(obj));
  };
  initial._initial = deepCopy(initial);

  /**
   * GameReducer
   *
   * Redux reducer that maintains the overall game state.
   * @param {object} state - The state before the action.
   * @param {object} action - A Redux action.
   */
  return function () {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initial;
    var action = arguments[1];

    switch (action.type) {
      case MAKE_MOVE:
        {
          var G = game.reducer(state.G, action.move, state.ctx);
          var log = [].concat(toConsumableArray(state.log), [action]);
          return _extends({}, state, { G: G, _id: state._id + 1, log: log });
        }

      case END_TURN:
        {
          // Update winner.
          var winner = game.victory(state.G, state.ctx);

          // The game may have some end of turn clean up.
          var _G = game.reducer(state.G, { type: END_TURN }, state.ctx);

          var ctx = state.ctx;

          // Update current player.
          var currentPlayer = (+ctx.currentPlayer + 1) % ctx.numPlayers + "";

          // Update turn.
          var turn = ctx.turn + 1;

          ctx = _extends({}, ctx, { currentPlayer: currentPlayer, turn: turn, winner: winner });

          // Update log.
          var _log = [].concat(toConsumableArray(state.log), [action]);

          return _extends({}, state, { G: _G, ctx: ctx, _id: state._id + 1, log: _log });
        }

      case RESTORE:
        {
          return action.state;
        }

      default:
        return state;
    }
  };
}

/**
 * createDispatchers
 *
 * Creates a set of dispatchers to make moves.
 * @param {Array} moveNames - A list of move names.
 * @param {object} store - The Redux store to create dispatchers for.
 */

/*
 * Copyright 2017 Google Inc.
 *
 * Use of this source code is governed by a MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 */

var Koa = require('koa');
var IO = require('koa-socket');
var Redux = require('redux');
function Server$1(_ref) {
  var game = _ref.game,
      numPlayers = _ref.numPlayers;

  var app = new Koa();
  var io = new IO();

  app.context.io = io;
  io.attach(app);

  var reducer = createGameReducer({ game: game, numPlayers: numPlayers });
  var db = new InMemory(reducer);
  var clientInfo = new Map();
  var roomInfo = new Map();

  io.on('connection', function (ctx) {
    var socket = ctx.socket;

    socket.on('action', function (action, stateID, gameID, playerID) {
      var store = db.get(gameID);

      if (store === undefined) {
        return { error: 'game not found' };
      }

      var state = store.getState();

      // Bail out if the player making the move is not
      // the current player. The null player is always
      // allowed.
      if (playerID != null && playerID != state.ctx.currentPlayer) {
        return;
      }

      if (state._id == stateID) {
        // Update server's version of the store.
        store.dispatch(action);
        var _state = store.getState();

        // Get clients connected to this current game.
        var roomClients = roomInfo.get(gameID);
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = roomClients.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var client = _step.value;

            // Don't send an update to the current client.
            if (client == socket.id) {
              continue;
            }

            var _playerID = clientInfo.get(client);

            socket.to(client).emit('sync', gameID, _extends({}, _state, {
              G: game.playerView(_state.G, _state.ctx, _playerID)
            }));
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        db.set(gameID, store);
      }
    });

    socket.on('sync', function (gameID, playerID) {
      socket.join(gameID);

      var roomClients = roomInfo.get(gameID);
      if (roomClients === undefined) {
        roomClients = new Set();
        roomInfo.set(gameID, roomClients);
      }
      roomClients.add(socket.id);

      clientInfo.set(socket.id, { gameID: gameID, playerID: playerID });

      var store = db.get(gameID);
      if (store === undefined) {
        store = Redux.createStore(reducer);
        db.set(gameID, store);
      }

      var state = store.getState();
      socket.emit('sync', gameID, _extends({}, state, {
        G: game.playerView(state.G, state.ctx, playerID)
      }));
    });

    socket.on('disconnect', function () {
      clientInfo.delete(socket.id);
    });
  });

  return app;
}

/*
 * Copyright 2017 Google Inc.
 *
 * Use of this source code is governed by a MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 */

module.exports = Server$1;
